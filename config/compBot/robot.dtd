<!ELEMENT robot (navx?, pigeon?, pcm?, pdp?, lidar*, camera*, led?, chassis?, mechanism* )>

<!-- ====================================================
			enum NAVX_ORIENTATION 
			{
				FLAT_LOGO_TOWARD_BACK,
				FLAT_LOGO_TOWARD_FRONT,
				FLAT_LOGO_TOWARD_LEFT_SIDE,
				FLAT_LOGO_TOWARD_RIGHT_SIDE,
				MAX_NAVX_TYPES
			};
			
			enum NAVX_PORT 
			{
				SPI,
				I2C,
				SERIAL,
				MAX_NAVX_PORTS
			};

	==================================================== -->

<!ELEMENT navx EMPTY>
<!ATTLIST navx
		  orientation	( 0 | 1 | 2 | 3 ) "0"
		  porttype      ( 0 | 1 | 2 ) "0"
		  portid		CDATA #REQUIRED
		  updaterate	CDATA #IMPLIED
>

<!-- ====================================================
	 Pigeon IMU
	 ==================================================== -->
<!ELEMENT pigeon EMPTY>
<!ATTLIST pigeon 
          canId             (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
                              10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 
                              20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 
                              30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 
                              40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 
                              50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 
                              60 | 61 | 62 ) "0"
>

<!-- ====================================================
	 PCM (compressor) 
	 ==================================================== -->
<!ELEMENT pcm (analogInput?)>
<!ATTLIST pcm 
          canId             (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
                              10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 
                              20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 
                              30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 
                              40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 
                              50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 
                              60 | 61 | 62 ) "0"
>

<!-- ====================================================
	 PDP (power distribution panel) 
	 ==================================================== -->
<!ELEMENT pdp EMPTY>
<!ATTLIST pdp 
          canId             (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
                              10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 
                              20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 
                              30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 
                              40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 
                              50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 
                              60 | 61 | 62 ) "0"
>

<!-- ====================================================
	 LEDs
	 ==================================================== -->
<!ELEMENT led EMPTY>
<!ATTLIST led 
          canId             (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
                              10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 
                              20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 
                              30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 
                              40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 
                              50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 
                              60 | 61 | 62 ) "0"
>


<!-- ====================================================
     chassis type options 
     ====================================================
			enum CHASSIS_TYPE
			{
				UNKNOWN_CHASSIS = -1,
				TANK_CHASSIS,
				MECANUM_CHASSIS,
				MAX_CHASSIS_TYPES
			};


    Wheel Base is front-back distance between wheel centers 
    Track is the distance between wheels on an "axle"       
	==================================================== -->
<!ELEMENT chassis (motor*) >
<!ATTLIST chassis 
          type              ( 0 | 1 | 2  ) "0"
          wheelDiameter     CDATA #REQUIRED
          wheelBase         CDATA #REQUIRED
          track             CDATA #REQUIRED
>



<!-- ====================================================
        enum MECHANISM_TYPE
        {
            UNKNOWN_MECHANISM = -1,
            GRABBER,
            LIFT,
            CLIMBER,
            SIDE_HANGER,
            MAX_MECHANISM_TYPES
        };


	==================================================== -->
<!ELEMENT mechanism (motor*, analogInput*, digitalInput*, solenoid*, servo* )>
<!ATTLIST mechanism 
          type              ( 0 | 1 | 2 | 3 | 4 ) "0"
>


<!-- ====================================================
        enum LIDAR_USAGE
        {
            FORWARD_GRABBER,
            DOWNWARD_GRABBER,
            MAX_LIDAR_USAGES
        };

	==================================================== -->
<!ELEMENT lidar EMPTY>
<!ATTLIST lidar 
          usage              ( 0 | 1  ) "0"
          inputpin			 CDATA "0"
          triggerpin		 CDATA "0"
>

<!-- ====================================================
	 camera
	 
	    enum PIXEL_FORMAT
        {
                UNKNOWN_PIXEL_FORMAT = -1,
                KMJPEG,
                KYUYV,
                KRGB565,
                KBGR,
                KGRAY
        };
	==================================================== -->

<!ELEMENT camera EMPTY>
<!ATTLIST camera 
          type              ( 0 | 1 | 2 | 3 | 4 ) "0"
          width			 	CDATA "0"
          height		 	CDATA "0"
          fps			 	CDATA "0"
>


<!-- ====================================================
	 motor usage options 
	 ====================================================
		enum TALON_TYPE
		{
			UNKNOWN_TALON_TYPE = -1,
			MECANUM_FRONT_LEFT,
			MECANUM_FRONT_LEFT2,
			MECANUM_FRONT_RIGHT,
			MECANUM_FRONT_RIGHT2,
			MECANUM_BACK_LEFT,
			MECANUM_BACK_LEFT2,
			MECANUM_BACK_RIGHT,
			MECANUM_BACK_RIGHT2,
			TANK_LEFT_MASTER,
			TANK_LEFT_SLAVE1,
			TANK_LEFT_SLAVE2,
			TANK_RIGHT_MASTER,
			TANK_RIGHT_SLAVE1,
			TANK_RIGHT_SLAVE2,
			CLIMBER_MASTER,
			ELEVATOR_MASTER,
			ELEVATOR_SLAVE,
			SIDE_HANGER_MOTOR,
			ACTIVE_INTAKE_WHEELS,
			FOURBAR_LIFT_MOTOR,
			MAX_TALON_TYPES
		};

		
    ====================================================
    motor sensor types
    ====================================================
    	enum TALON_SENSOR_TYPE
		{
			NO_SENSOR = -1,
			QUAD_ENCODER,
			UNKNOWN_SENSOR,
			ANALOG_POT,
			ANALOG_ENCODER,
			ENCODER_RISING,
			ENCODER_FALLING,
			CTRE_MAG_ENCODER_RELATIVE,
			CTRE_MAG_ENCODER_ABSOLUTE,
			PULSE_WIDTH,
			MAX_SENSOR_TYPES
		};
	==================================================== -->
<!ELEMENT motor EMPTY>
<!ATTLIST motor 
          usage             		(  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
          					          10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 ) "0"
          canId             		(  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
                              		  10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 
                              		  20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 
                              		  30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 
                              		  40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 
                              		  50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 
                              		  60 | 61 | 62 ) "0"
          type              		CDATA #FIXED "cantalon"
          inverted          		( true | false ) "false"
          sensorInverted    		( true | false ) "false"
          feedbackDevice    		( -1 | 0  |  2 |  3 |  4 |  5 |  6 |  7 |  8 ) "-1"
          countsPerRev      		CDATA "0"
          gearRatio         		CDATA "1"
          brakeMode         		( true | false ) "false"
          slaveTo 					CDATA "-1"
          peakCurrentDuration 		CDATA #IMPLIED
          continuousCurrentLimit 	CDATA #IMPLIED
          peakCurrentLimit			CDATA #IMPLIED
          currentLimiting   		( true | false ) "false"          
>


<!-- ====================================================
	 analogInput type options 
	 ====================================================
	 enum ANALOG_SENSOR_TYPE
	 {
	 	UNKNOWN_ANALOG_TYPE = -1,
	 	ANALOG_GENERAL,
	 	ANALOG_GYRO,
	 	POTENTIOMETER,
	 	PRESSURE_GAUGE,
	 	MAX_ANALOG_TYPES
	 };
	 ==================================================== -->
<!ELEMENT analogInput EMPTY>
<!ATTLIST analogInput 
          type              (  0 |  1 |  2 | 3 ) "0"
          analogId          (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 ) "0"
          voltageMin        CDATA "0.0"
          voltageMax        CDATA "5.0"
          outputMin         CDATA #REQUIRED
          outputMax         CDATA #REQUIRED
>

<!-- ====================================================
	 digitalInput 
	 ====================================================
		enum DIGITAL_INPUT_TYPE
		{
			UNKNOWN_DIGITAL_INPUT_TYPE = -1,
			CUBE_PRESENT,
			ELEVATOR_POSITION_0,
			ELEVATOR_POSITION_1,
			ELEVATOR_POSITION_2,
			ELEVATOR_POSITION_3,
			ELEVATOR_POSITION_4,
			ELEVATOR_POSITION_5,
			ELEVATOR_POSITION_6,
			MAX_DIGITAL_INPPUT_TYPES
		};

	 ==================================================== -->
<!ELEMENT digitalInput EMPTY>
<!ATTLIST digitalInput 
          usage             (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 ) "0"
          digitalId         (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
                              10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 
                              20 | 21 | 22 | 23 | 24 | 25 ) "0"
          reversed          (true | false ) "false"
>

<!-- ====================================================
	 solenoid usage options 
     ==================================================== 
       enum DRAGON_SOLENOID_USAGE
        {
            CONTROL_4BAR,
            GRABBER_CLUTCH,
            GRABBER_POSITION,
            SIDEHANGER_LATCH,
            SIDEHANGER_LATCH2
        };
 	 ==================================================== -->
<!ELEMENT solenoid EMPTY>
<!ATTLIST solenoid 
          usage             (  0 |  1 | 2 | 3 | 4 ) "0"
          pcmId             (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
                              10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 
                              20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 
                              30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 
                              40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 
                              50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 
                              60 | 61 | 62 ) "0"
          channel			(  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 ) "0"
          reversed			( true | false ) "false"
>

<!-- ====================================================
	 servo usage options 
	 ====================================================
 		enum SERVO_USAGE
		{
			UNKNOWN_SERVO_USAGE = -1,
			SERVO_SIDEBAR_RELEASE_1,
			SERVO_SIDEBAR_RELEASE_2,
			MAX_SERVO_USAGES
		};

 	 ==================================================== -->
<!ELEMENT servo EMPTY>
<!ATTLIST servo 
          usage             (  0 |  1 | 2 ) "0"
          pwmId             (  0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 
                              10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 ) "0"
          minAngle			CDATA "0.0"
          maxAngle          CDATA "180.0"
>


